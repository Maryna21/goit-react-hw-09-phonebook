{"version":3,"sources":["components/ContactList/transitions/addTransition.module.css","components/ContactForm/contactForm.module.css","components/Error/error.module.css","components/Error/errorTransition.module.css","components/ContactList/contactList.module.css","components/Filter/filter.module.css","app.module.css","logoTransition.module.css","components/Error/error.js","redux/contacts-selectors.js","components/ContactForm/contactForm.js","svg/cross.js","components/ContactList/contactList.js","components/Filter/filter.js","views/ContactsView.js"],"names":["module","exports","Error","CSSTransition","in","timeout","classNames","errorTransition","unmountOnExit","className","s","box","getLoading","state","contacts","loading","getAllContacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","error","setError","loginInputId","shortid","generate","handleNameChange","useCallback","event","currentTarget","value","handleNumberChange","contactForm","onSubmit","preventDefault","find","contact","setTimeout","contactsOperations","addContact","labelForm","htmlFor","inputForm","type","id","onChange","buttonContactForm","Cross","data-name","fill","width","height","viewBox","xmlns","rx","transform","x","y","ContactList","onDeleteContact","deleteContact","TransitionGroup","component","list","map","addTransition","appear","item","buttonDelete","onClick","Filter","e","contactsAction","target","label","input","ContactsView","isloadingContacts","useEffect","authOperations","getCurrentUser","fetchContacts","logoTransition","title"],"mappings":"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","file":"static/js/3.42ff9911.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"addTransition_enter__3Z_LA\",\"enterActive\":\"addTransition_enterActive__3A6JT\",\"exit\":\"addTransition_exit__2pRWX\",\"exitActive\":\"addTransition_exitActive__sk3MZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"contactForm_contactForm__2leNd\",\"labelForm\":\"contactForm_labelForm__108mt\",\"inputForm\":\"contactForm_inputForm__2N457\",\"buttonContactForm\":\"contactForm_buttonContactForm__2b9Ri\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"error_box__2AiIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"errorTransition_enter__2_wav\",\"enterActive\":\"errorTransition_enterActive__2qmF0\",\"exit\":\"errorTransition_exit__3P-rp\",\"exitActive\":\"errorTransition_exitActive__3bF8k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"contactList_buttonDelete__1KIRp\",\"item\":\"contactList_item__1Zfmy\",\"number\":\"contactList_number__PxfHE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"filter_filter__1EaBe\",\"input\":\"filter_input__1g0Wd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"app_title__2fbQI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"logoTransition_appear__3AKSh\",\"appearActive\":\"logoTransition_appearActive__2IOna\"};","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport s from 'components/Error/error.module.css';\nimport errorTransition from 'components/Error/errorTransition.module.css';\nconst Error = () => {\n    return (\n         <CSSTransition\n            in={true}\n            timeout={250}\n            classNames={errorTransition}\n            unmountOnExit\n        >\n            <div className={s.box}>Contact is already exists!</div>\n            </CSSTransition>\n    )\n}\nexport default Error;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoading = state => state.contacts.loading;\n\nexport const getAllContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({name})  =>\n    name.toLowerCase().includes(normalizedFilter));\n    }\n)\n\n\n// export const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n//     return contacts.filter(contact  =>\n//     contact.name.toLowerCase().includes(normalizedFilter));\n// }\n","import PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport React, { useState, useCallback } from 'react';\nimport s from 'components/ContactForm/contactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/contacts-operations';\nimport Error from 'components/Error/error';\nimport { getAllContacts, getName } from 'redux/contacts-selectors';\n// import { toast } from 'react-toastify';\n\n// const mapStateToProps = (state) => ({\n//   contacts: getAllContacts(state),\n// });\n         \n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: ({ name, number }) => dispatch(contactsOperations.addContact({ name, number})),\n// });\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getAllContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [error, setError] = useState(false);\n\n   const loginInputId = shortid.generate();\n   \n  const handleNameChange = useCallback(\n    event => {\n    setName(event.currentTarget.value);\n  }, []);\n\n  const handleNumberChange = useCallback(\n    event => {\n    setNumber(event.currentTarget.value);\n  },[]);\n\n  const handleSubmit = event => {\n      event.preventDefault();\n  \n      if (contacts.find(contact => contact.name === name)) {\n      \n        setError(true)\n    \n        return setTimeout(() => setError(false), 500);\n       }\n      dispatch(contactsOperations.addContact({ name, number }))\n      setName('');\n    setNumber('');\n    };\n \n    return (\n              <>\n              <form className={s.contactForm}\n                onSubmit={handleSubmit}>\n                <label className={s.labelForm} htmlFor={loginInputId}>Name</label>\n                <input className={s.inputForm} type=\"text\" name=\"name\" id={loginInputId} value={name} onChange={handleNameChange}/>\n                <label className={s.labelForm} htmlFor={loginInputId}>Number</label>\n                <input className={s.inputForm}  type=\"tel\" name=\"number\" id={loginInputId} value={number} onChange={handleNumberChange}/>\n                <button className={s.buttonContactForm} type=\"submit\">Add contact</button>\n              </form>\n              { error && <Error /> } \n    </>\n            );\n          }\n\n          ContactForm.propTypes = {\n            handleSubmit: PropTypes.func,\n            onAddContact: PropTypes.func,\n            loginInputId: PropTypes.func,\n            name: PropTypes.string,\n            number: PropTypes.number,\n          };\n\n\n  \n","import React from 'react';\n const Cross = ()=>{\n    return(\n  <svg data-name=\"Layer 2\" fill=\"white\" width=\"60\" height=\"60\" id=\"bcc87848-35d3-4b8c-bef5-f50bbd1dee72\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"2.5\" rx=\"1.25\" transform=\"translate(19 45.87) rotate(-135)\" width=\"15.435\" x=\"11.282\" y=\"17.75\"/><rect height=\"2.5\" rx=\"1.25\" transform=\"translate(-7.87 19) rotate(-45)\" width=\"15.435\" x=\"11.282\" y=\"17.75\"/></svg>\n)\n}\nexport default Cross;","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport s from 'components/ContactList/contactList.module.css';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport  addTransition from 'components/ContactList/transitions/addTransition.module.css';\nimport Cross from 'svg/cross';\nimport contactsOperations from 'redux/contacts-operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts-selectors';\n\n// const mapStateToProps = (state) => ({\n// contacts: getVisibleContacts(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n// });\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getVisibleContacts);\n\nconst onDeleteContact = useCallback(\n    (id) => dispatch(contactsOperations.deleteContact(id)),\n    [dispatch]\n  )\n \n    return (\n      <TransitionGroup component=\"ul\" className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n          <CSSTransition key={id} timeout={250} classNames={addTransition} appear={true} unmountOnExit>\n            <li className={s.item}>\n              <div>{name}</div>\n              <div className={s.number}>{number}</div>\n              <button className={s.buttonDelete} type=\"button\" onClick={()=> onDeleteContact(id)}><Cross />\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  }\n\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.number,\n    }),\n  )\n};\n\n\n\n\n\n\n\n","import React, {useCallback} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {CSSTransition } from 'react-transition-group';\nimport addTransition from 'components/ContactList/transitions/addTransition.module.css';\nimport s from 'components/Filter/filter.module.css';\nimport * as contactsAction from 'redux/contacts-actions';\nimport { getFilter } from 'redux/contacts-selectors';\n\nexport default function Filter() {\n    const dispatch = useDispatch();\n    const value = useSelector(getFilter);\n\n    const onChange = useCallback((e) => {\n    dispatch(dispatch(contactsAction.changeFilter(e.target.value)))}, \n    [dispatch]);\n\n    return (  \n        <CSSTransition timeout={250} classNames={addTransition} appear={true}>\n            <form className={s.filter}>\n            <label className={s.label}>Find contacts by name</label>\n                <input className={s.input} type=\"name\" value={value} onChange={onChange} />\n            </form>\n            </CSSTransition>  \n            \n    )\n}\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChangeFilter: PropTypes.func,\n};\n\n\n","import React, { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/contactForm';\nimport ContactList from 'components/ContactList/contactList';\nimport Filter from 'components/Filter/filter';\nimport s from 'app.module.css';\nimport Container from 'components/Container/container';\nimport { CSSTransition } from 'react-transition-group';\nimport logoTransition from 'logoTransition.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/contacts-operations';\nimport { getLoading } from 'redux/contacts-selectors';\nimport authOperations from 'redux/auth/auth-operations';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const isloadingContacts = useSelector(getLoading);\n\n  useEffect(() => {\n    dispatch(authOperations.getCurrentUser());\n   }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts())\n  },[dispatch])\n\n    return (\n      <Container>\n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={logoTransition}\n        unmountOnExit\n        >\n          <h1 className={s.title}>Phonebook</h1>\n          </CSSTransition>\n     <ContactForm/>\n        <Filter />\n        {isloadingContacts && <h1>loading...</h1>}\n        <ContactList/>\n      </Container>\n    );\n  }\n\n\n\n"],"sourceRoot":""}